#!/bin/bash

cona="commit name: "
brna="branch name: "
repourl="repo url: "
ver="1.0.2"

function usage() {
    corgit="\e[1mcorgit\e[0m"

    local u=(
        "Usage:"
        "   cgit -h: help (this output)"
        "   cgit -v: corgit version"
        "   cgit i: init \".git\" and push"
        "   cgit s: status"
        "   cgit e: push an existing repo"
        "   cgit ph: push and commit"
        "   cgit pl: fetch and pull"
        " "
        "Inside $corgit folder "
        "Setup:"
        "   ./setup"
        " "
        "Uninstall:"
        "   ./un"
    )

    printf "%s\n" "${u[@]}"
}

function version() {
    local v=(
        "$ver"
    )

    printf "%s\n" "${v[@]}"
}

initx() {
    # init
    git init
    git add .

    echo "$cona"
    echo " "
    read cn
    git commit -m "$cn"

    echo "$brna"
    echo " "
    read bn
    git branch -M $bn

    echo $repourl
    echo " "
    read url
    git remote add origin $url

    git push -u origin $bn
}

einit() {
    # init
    git init
}

noGit() {
    echo -e "There's no .git folder... do so want do init it ?\n[Y/n]"
    read -n 1 accept

    if [[ $accept == "" || $accept == "Y" || $accept == "y" ]]; then
        initx
    else
        echo you should accept to init
        exit 0
    fi
}

pushx() {
    if [ -d ".git" ]; then
        git status
        git add .
        echo $cona
        echo " "
        read cn
        git commit -m "$cn"
        git push
    else
        noGit
    fi
}

pullx() {
    if [ -d ".git" ]; then
        # pull
        git pull
    else
        einit
    fi
}

status() {
    if [ -d ".git" ]; then
        # status
        git status
    else
        noGit
    fi
}

exrepo() {
    if [ -d ".git" ]; then
        echo "$repourl"
        echo " "
        read url

        echo "$brna"
        echo " "
        read bn

        git remote add origin $url
        git branch -M $bn
        git push -u origin $bn
    else
        einit
    fi
}

function badUsage() {
    local msg="$1"
    local txt=(
        "For an overview of the command, execute:"
        "cgit h"
    )

    [[ $msg ]] && printf "$msg\n"

    printf "%s\n" "${txt[@]}"
}

while (($#)); do
    case "$1" in

    --help | -h)
        usage
        exit 0
        ;;

    --version | -v)
        version
        exit 0
        ;;

    status | s)
        status
        exit 0
        ;;

    init | i)
        initx
        exit 0
        ;;

    e)
        exrepo
        exit 0
        ;;

    push | ph)
        pushx
        exit 0
        ;;

    pull | pl)
        pullx
        exit 0
        ;;

    *)
        badUsage "Option/command not recognized."
        exit 0
        ;;
    esac
done
